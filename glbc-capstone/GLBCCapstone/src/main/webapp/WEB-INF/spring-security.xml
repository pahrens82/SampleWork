<?xml version="1.0" encoding="UTF-8"?>
<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security-3.1.xsd"> 

    <!-- Expression Handler bean definition START -->
    <beans:bean id="webexpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <!-- Expression Handler bean definition END -->
    
    <!-- PASSWORD ENCODER BEAN CHANGES START -->
    <beans:bean id="encoder"
    class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!-- PASSWORD ENCODER BEAN CHANGES END -->
    
    <!-- #2 - Make sure we don't need authorization to get to the login or home page -->
    <http use-expressions="false" pattern="/login" security="none"/>
    <http use-expressions="false" pattern="/" security="none"/>
    <http use-expressions="false" pattern="/css/**" security="none" />
    <http use-expressions="false" pattern="/js/**" security="none" />
    <http use-expressions="false" pattern="/img/**" security="none" />
 
    <!-- #3 - Authentication/login form and protected endpoint configuration -->
    <http auto-config="true" use-expressions="false">
        <!-- #3a - Login via html form, use Spring to do the security check -->
        <!-- #3b - Use the login page at this endpoint -->
        <!-- #3c - Redirect here if login fails -->
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    default-target-url="/home"
                    username-parameter="username"
                    password-parameter="password"
                    authentication-failure-url="/login?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/login" />
        <!-- #3e - Access to these endpoints require admin role -->
        <intercept-url pattern="/admin/user/**" access="ROLE_ADMIN" />
        <intercept-url pattern="/adminHome" access="ROLE_ADMIN, ROLE_SUPER" />
        <intercept-url pattern="/admin/**" access="ROLE_ADMIN, ROLE_SUPER" />
        <!-- Multiple roles are allowed - the access list is comma-delimited -->    
        <!-- #3f - Access to all other controller endpoints require guest role -->
        <intercept-url pattern="/home" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/**" access="ROLE_GUEST, IS_AUTHENTICATED_ANONYMOUSLY"/>
    </http>
    
    <!-- #4 - Authentication Manager config -->
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- AUTHENTICATION-PROVIDER CHANGES START -->
            <password-encoder ref="encoder" />
            <!-- AUTHENTICATION-PROVIDER CHANGES END -->
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!-- We use the dataSource defined in spring-persistence.xml -->
            <!-- and we give Spring Security the query to use to lookup -->
            <!-- the user’s credentials (get the password from the users -->
            <!-- tables and get the roles from the authorities table) -->
            <jdbc-user-service id="userService"
                data-source-ref="dataSource"
                users-by-username-query=
 "select username, password, enabled from User where username=?"
                authorities-by-username-query=
 "select UserPermissions.username as username, Permission.authority as authority from UserPermissions join Permission on UserPermissions.Permission_ID=Permission.Permission_ID where username=?" />
        </authentication-provider>
    </authentication-manager>    
        
        
</beans:beans>
